{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { ResetPassword } from 'src/app/shared/models/resetPassword';\nimport { passwordValidator } from '../sign-up/password.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/shared/services/user.service\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@ngx-translate/core\";\nfunction ResetPasswordComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Warning.PasswordRequired\"), \" \");\n  }\n}\nfunction ResetPasswordComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Warning.PasswordComplexity\"), \" \");\n  }\n}\nfunction ResetPasswordComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Warning.PasswordTooShort\"), \" \");\n  }\n}\nfunction ResetPasswordComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Warning.PasswordTooLong\"), \" \");\n  }\n}\nfunction ResetPasswordComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 1, \"Warning.PasswordNotMatch\"), \" \");\n  }\n}\nfunction ResetPasswordComponent_p_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 13);\n    i0.ɵɵtext(1, \"Password failed to change!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(route, formBuilder, userService, router) {\n      this.route = route;\n      this.formBuilder = formBuilder;\n      this.userService = userService;\n      this.router = router;\n    }\n    ngOnInit() {\n      this.password = new FormControl(null, [Validators.required, Validators.minLength(8), Validators.maxLength(16), Validators.pattern(\"^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*]).*$\")]);\n      this.confirmPassword = new FormControl(null, [Validators.required, passwordValidator]);\n      this.formGroup = this.formBuilder.group({\n        password: this.password,\n        confirmPassword: this.confirmPassword\n      });\n      this.userId = this.route.snapshot.params[\"id\"];\n      this.isFailed = false;\n    }\n    onSubmit() {\n      const newPassword = new ResetPassword(this.password.value, this.confirmPassword.value);\n      this.userService.resetPassword(newPassword, this.userId).pipe().subscribe(() => {\n        this.isFailed = false;\n        this.router.navigateByUrl('/').then(() => {\n          window.location.reload();\n        });\n      }, error => {\n        this.isFailed = true;\n      });\n    }\n  }\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 29,\n    vars: 20,\n    consts: [[1, \"my-3\"], [3, \"formGroup\"], [1, \"d-flex\", \"flex-column\"], [1, \"mb-3\"], [1, \"px-2\"], [\"appearance\", \"standard\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"type\", \"password\", \"required\", \"\"], [4, \"ngIf\"], [1, \"px-2\", 2, \"margin-top\", \"1em\"], [\"matInput\", \"\", \"formControlName\", \"confirmPassword\", \"type\", \"password\", \"required\", \"\"], [\"style\", \"margin-top: 10px; font-size: 11px; text-align: center;\", 4, \"ngIf\"], [\"align\", \"end\"], [\"mat-raised-button\", \"\", \"id\", \"sign-up-submit-btn\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [2, \"margin-top\", \"10px\", \"font-size\", \"11px\", \"text-align\", \"center\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"mat-card-content\", 1)(3, \"div\", 2)(4, \"mat-card-title\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵtemplate(13, ResetPasswordComponent_mat_error_13_Template, 3, 3, \"mat-error\", 7);\n        i0.ɵɵtemplate(14, ResetPasswordComponent_mat_error_14_Template, 3, 3, \"mat-error\", 7);\n        i0.ɵɵtemplate(15, ResetPasswordComponent_mat_error_15_Template, 3, 3, \"mat-error\", 7);\n        i0.ɵɵtemplate(16, ResetPasswordComponent_mat_error_16_Template, 3, 3, \"mat-error\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 8)(18, \"mat-form-field\", 5)(19, \"mat-label\");\n        i0.ɵɵtext(20);\n        i0.ɵɵpipe(21, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 9);\n        i0.ɵɵtemplate(23, ResetPasswordComponent_mat_error_23_Template, 3, 3, \"mat-error\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(24, ResetPasswordComponent_p_24_Template, 2, 0, \"p\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-card-actions\", 11)(26, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_button_click_26_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(27);\n        i0.ɵɵpipe(28, \"translate\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(6, 12, \"Dictionary.ResetPassword\"), \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 14, \"Label.NewPassword\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup.hasError(\"pattern\", \"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup.hasError(\"minlength\", \"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup.hasError(\"maxlength\", \"password\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(21, 16, \"Label.ConfirmPassword\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.confirmPassword == null ? null : ctx.confirmPassword.hasError(\"notSame\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isFailed);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.formGroup.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(28, 18, \"Dictionary.ResetPassword\"), \" \");\n      }\n    },\n    directives: [i4.MatCard, i4.MatCardContent, i2.NgControlStatusGroup, i2.FormGroupDirective, i4.MatCardTitle, i5.MatFormField, i5.MatLabel, i6.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i7.NgIf, i5.MatError, i4.MatCardActions, i8.MatButton],\n    pipes: [i9.TranslatePipe],\n    styles: [\"mat-card[_ngcontent-%COMP%]{padding:30px;margin:auto;max-width:600px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{margin:0}h3[_ngcontent-%COMP%]{margin:0}.row[_ngcontent-%COMP%]{display:grid}\"]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}