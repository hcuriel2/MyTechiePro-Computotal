{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'), exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define(['@angular/core', 'exports', '@angular/core'], factory) : factory(global.ng.core, (global.ng = global.ng || {}, global.ng['ngx-google-places-autocomplete'] = global.ng['ngx-google-places-autocomplete'] || {}), global.ng.core);\n})(this, function (ɵngcc0, exports, _angular_core) {\n  'use strict';\n\n  var Options = function () {\n    /**\n     * @param {?=} opt\n     */\n    function Options(opt) {\n      if (!opt) return;\n      Object.assign(this, opt);\n    }\n    return Options;\n  }();\n  var GooglePlaceDirective = function () {\n    /**\n     * @param {?} el\n     * @param {?} ngZone\n     */\n    function GooglePlaceDirective(el, ngZone) {\n      this.el = el;\n      this.ngZone = ngZone;\n      this.onAddressChange = new _angular_core.EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    GooglePlaceDirective.prototype.ngAfterViewInit = function () {\n      if (!this.options) this.options = new Options();\n      this.initialize();\n    };\n    /**\n     * @return {?}\n     */\n    GooglePlaceDirective.prototype.isGoogleLibExists = function () {\n      return !(!google || !google.maps || !google.maps.places);\n    };\n    /**\n     * @return {?}\n     */\n    GooglePlaceDirective.prototype.initialize = function () {\n      var _this = this;\n      if (!this.isGoogleLibExists()) throw new Error(\"Google maps library can not be found\");\n      this.autocomplete = new google.maps.places.Autocomplete(this.el.nativeElement, this.options);\n      if (!this.autocomplete) throw new Error(\"Autocomplete is not initialized\");\n      if (!this.autocomplete.addListener != null) {\n        this.eventListener = this.autocomplete.addListener('place_changed', function () {\n          _this.handleChangeEvent();\n        });\n      }\n      this.el.nativeElement.addEventListener('keydown', function (event) {\n        if (!event.key) {\n          return;\n        }\n        var /** @type {?} */key = event.key.toLowerCase();\n        if (key == 'enter' && event.target === _this.el.nativeElement) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      });\n      // according to https://gist.github.com/schoenobates/ef578a02ac8ab6726487\n      if (window && window.navigator && window.navigator.userAgent && navigator.userAgent.match(/(iPad|iPhone|iPod)/g)) {\n        setTimeout(function () {\n          var /** @type {?} */containers = document.getElementsByClassName('pac-container');\n          if (containers) {\n            var /** @type {?} */arr = Array.from(containers);\n            if (arr) {\n              for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n                var container = arr_1[_i];\n                if (!container) continue;\n                container.addEventListener('touchend', function (e) {\n                  e.stopImmediatePropagation();\n                });\n              }\n            }\n          }\n        }, 500);\n      }\n    };\n    /**\n     * @return {?}\n     */\n    GooglePlaceDirective.prototype.reset = function () {\n      this.autocomplete.setComponentRestrictions(this.options.componentRestrictions);\n      this.autocomplete.setTypes(this.options.types);\n    };\n    /**\n     * @return {?}\n     */\n    GooglePlaceDirective.prototype.handleChangeEvent = function () {\n      var _this = this;\n      this.ngZone.run(function () {\n        _this.place = _this.autocomplete.getPlace();\n        if (_this.place) {\n          _this.onAddressChange.emit(_this.place);\n        }\n      });\n    };\n    /**\n     * @nocollapse\n     */\n    GooglePlaceDirective.ctorParameters = function () {\n      return [{\n        type: _angular_core.ElementRef\n      }, {\n        type: _angular_core.NgZone\n      }];\n    };\n    GooglePlaceDirective.propDecorators = {\n      'options': [{\n        type: _angular_core.Input,\n        args: ['options']\n      }],\n      'onAddressChange': [{\n        type: _angular_core.Output\n      }]\n    };\n    GooglePlaceDirective.ɵfac = function GooglePlaceDirective_Factory(t) {\n      return new (t || GooglePlaceDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n    };\n    GooglePlaceDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n      type: GooglePlaceDirective,\n      selectors: [[\"\", \"ngx-google-places-autocomplete\", \"\"]],\n      inputs: {\n        options: \"options\"\n      },\n      outputs: {\n        onAddressChange: \"onAddressChange\"\n      },\n      exportAs: [\"ngx-places\"]\n    });\n    (function () {\n      (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n    })();\n    return GooglePlaceDirective;\n  }();\n  var GooglePlaceModule = function () {\n    function GooglePlaceModule() {}\n    /**\n     * @nocollapse\n     */\n    GooglePlaceModule.ctorParameters = function () {\n      return [];\n    };\n    GooglePlaceModule.ɵfac = function GooglePlaceModule_Factory(t) {\n      return new (t || GooglePlaceModule)();\n    };\n    GooglePlaceModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n      type: GooglePlaceModule\n    });\n    GooglePlaceModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n    (function () {\n      (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n    })();\n    (function () {\n      (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GooglePlaceModule, {\n        declarations: [GooglePlaceDirective],\n        exports: [GooglePlaceDirective]\n      });\n    })();\n    return GooglePlaceModule;\n  }();\n  exports.GooglePlaceModule = GooglePlaceModule;\n  exports.GooglePlaceDirective = GooglePlaceDirective;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"script"}