{"ast":null,"code":"import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\nlet MaskApplierService = /*#__PURE__*/(() => {\n  class MaskApplierService {\n    constructor(_config) {\n      this._config = _config;\n      this.maskExpression = '';\n      this.actualValue = '';\n      this.shownMaskExpression = '';\n      this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n        const x = str.split(decimalChar);\n        const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res = x[0];\n        const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n        if (separatorLimit && +separatorLimit) {\n          if (res[0] === '-') {\n            res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n          } else {\n            res = res.slice(0, separatorLimit.length);\n          }\n        }\n        const rgx = /(\\d+)(\\d{3})/;\n        while (thousandSeparatorChar && rgx.test(res)) {\n          res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n        }\n        if (precision === undefined) {\n          return res + decimals;\n        } else if (precision === 0) {\n          return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n      };\n      this.percentage = str => {\n        return Number(str) >= 0 && Number(str) <= 100;\n      };\n      this.getPrecision = maskExpression => {\n        const x = maskExpression.split('.');\n        if (x.length > 1) {\n          return Number(x[x.length - 1]);\n        }\n        return Infinity;\n      };\n      this.checkAndRemoveSuffix = inputValue => {\n        var _a, _b, _c;\n        for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n          const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n          if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n            return inputValue.replace(substr, '');\n          }\n        }\n        return inputValue;\n      };\n      this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n        if (precision < Infinity) {\n          const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n          const precisionMatch = inputValue.match(precisionRegEx);\n          if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n            const diff = precisionMatch[0].length - 1 - precision;\n            inputValue = inputValue.substring(0, inputValue.length - diff);\n          }\n          if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n            inputValue = inputValue.substring(0, inputValue.length - 1);\n          }\n        }\n        return inputValue;\n      };\n      this._shift = new Set();\n      this.clearIfNotMatch = this._config.clearIfNotMatch;\n      this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n      this.maskSpecialCharacters = this._config.specialCharacters;\n      this.maskAvailablePatterns = this._config.patterns;\n      this.prefix = this._config.prefix;\n      this.suffix = this._config.suffix;\n      this.thousandSeparator = this._config.thousandSeparator;\n      this.decimalMarker = this._config.decimalMarker;\n      this.hiddenInput = this._config.hiddenInput;\n      this.showMaskTyped = this._config.showMaskTyped;\n      this.placeHolderCharacter = this._config.placeHolderCharacter;\n      this.validation = this._config.validation;\n      this.separatorLimit = this._config.separatorLimit;\n      this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n      this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n      const [mask, customPattern] = maskAndPattern;\n      this.customPattern = customPattern;\n      return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n      if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n        return '';\n      }\n      let cursor = 0;\n      let result = '';\n      let multi = false;\n      let backspaceShift = false;\n      let shift = 1;\n      let stepBack = false;\n      if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n        inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n      }\n      if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n        inputValue = this.checkAndRemoveSuffix(inputValue);\n      }\n      const inputArray = inputValue.toString().split('');\n      if (maskExpression === 'IP') {\n        this.ipError = !!(inputArray.filter(i => i === '.').length < 3 && inputArray.length < 7);\n        maskExpression = '099.099.099.099';\n      }\n      const arr = [];\n      for (let i = 0; i < inputValue.length; i++) {\n        if (inputValue[i].match('\\\\d')) {\n          arr.push(inputValue[i]);\n        }\n      }\n      if (maskExpression === 'CPF_CNPJ') {\n        this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n        if (arr.length > 11) {\n          maskExpression = '00.000.000/0000-00';\n        } else {\n          maskExpression = '000.000.000-00';\n        }\n      }\n      if (maskExpression.startsWith('percent')) {\n        if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n          inputValue = this._stripToDecimal(inputValue);\n          const precision = this.getPrecision(maskExpression);\n          inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n        }\n        if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n          const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n          inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n        }\n        if (this.percentage(inputValue)) {\n          result = inputValue;\n        } else {\n          result = inputValue.substring(0, inputValue.length - 1);\n        }\n      } else if (maskExpression.startsWith('separator')) {\n        if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n          inputValue = this._stripToDecimal(inputValue);\n        }\n        inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker ? inputValue.slice(1, inputValue.length) : inputValue;\n        // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n        //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n        const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n        const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n        const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');\n        const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n        if (inputValue.match(invalidCharRegexp)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n        const precision = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n        const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n        result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n        const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n        const shiftStep = result.length - inputValue.length;\n        if (shiftStep > 0 && result[position] !== ',') {\n          backspaceShift = true;\n          let _shift = 0;\n          do {\n            this._shift.add(position + _shift);\n            _shift++;\n          } while (_shift < shiftStep);\n        } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n          this._shift.clear();\n          backspaceShift = true;\n          shift = shiftStep;\n          position += shiftStep;\n          this._shift.add(position);\n        } else {\n          this._shift.clear();\n        }\n      } else {\n        for (\n        // tslint:disable-next-line\n        let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n          if (cursor === maskExpression.length) {\n            break;\n          }\n          if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n            result += inputSymbol;\n            cursor += 2;\n          } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n            multi = false;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n            result += inputSymbol;\n            multi = true;\n          } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n            if (maskExpression[cursor] === 'H') {\n              if (Number(inputSymbol) > 2) {\n                cursor += 1;\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n                i--;\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n                continue;\n              }\n            }\n            if (maskExpression[cursor] === 'h') {\n              if (result === '2' && Number(inputSymbol) > 3) {\n                cursor += 1;\n                i--;\n                continue;\n              }\n            }\n            if (maskExpression[cursor] === 'm') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n                i--;\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n                continue;\n              }\n            }\n            if (maskExpression[cursor] === 's') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n                i--;\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n                continue;\n              }\n            }\n            const daysCount = 31;\n            if (maskExpression[cursor] === 'd') {\n              if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                cursor += 1;\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n                i--;\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n                continue;\n              }\n            }\n            if (maskExpression[cursor] === 'M') {\n              const monthsCount = 12;\n              // mask without day\n              const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n              // day<10 && month<12 for input\n              const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/');\n              // 10<day<31 && month<12 for input\n              const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n              // day<10 && month<12 for paste whole data\n              const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n              // 10<day<31 && month<12 for paste whole data\n              const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n              if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                cursor += 1;\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n                i--;\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n                continue;\n              }\n            }\n            result += inputSymbol;\n            cursor++;\n          } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n            result += maskExpression[cursor];\n            cursor++;\n            this._shiftStep(maskExpression, cursor, inputArray.length);\n            i--;\n          } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n            if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n              result += inputArray[cursor];\n            }\n            cursor++;\n            i--;\n          } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n            stepBack = true;\n          }\n        }\n      }\n      if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n        result += maskExpression[maskExpression.length - 1];\n      }\n      let newPosition = position + 1;\n      while (this._shift.has(newPosition)) {\n        shift++;\n        newPosition++;\n      }\n      let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n      if (stepBack) {\n        actualShift--;\n      }\n      cb(actualShift, backspaceShift);\n      if (shift < 0) {\n        this._shift.clear();\n      }\n      let onlySpecial = false;\n      if (backspaced) {\n        onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n      }\n      let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n      if (result.length === 0) {\n        res = `${this.prefix}${result}`;\n      }\n      return res;\n    }\n    _findSpecialChar(inputSymbol) {\n      return this.maskSpecialCharacters.find(val => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n      this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n      return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n    _stripToDecimal(str) {\n      return str.split('').filter((i, idx) => {\n        return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && this.allowNegativeNumbers;\n      }).join('');\n    }\n    _charToRegExpExpression(char) {\n      if (char) {\n        const charsToEscape = '[\\\\^$.|?*+()';\n        return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n      }\n      return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n      const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n      this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n  }\n  MaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n    return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config));\n  };\n  MaskApplierService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MaskApplierService,\n    factory: MaskApplierService.ɵfac\n  });\n  return MaskApplierService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MaskService = /*#__PURE__*/(() => {\n  class MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n      super(_config);\n      this.document = document;\n      this._config = _config;\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this.maskExpression = '';\n      this.isNumberValue = false;\n      this.placeHolderCharacter = '_';\n      this.maskIsShown = '';\n      this.selStart = null;\n      this.selEnd = null;\n      /**\n       * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n       * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n       */\n      this.writingValue = false;\n      this.onChange = _ => {};\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n      if (!maskExpression) {\n        return inputValue;\n      }\n      this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n      if (this.maskExpression === 'IP' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n      if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n      if (!inputValue && this.showMaskTyped) {\n        this.formControlResult(this.prefix);\n        return this.prefix + this.maskIsShown;\n      }\n      const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n      let newInputValue = '';\n      if (this.hiddenInput && !this.writingValue) {\n        let actualResult = this.actualValue.split('');\n        // tslint:disable no-unused-expression\n        inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n        // tslint:enable no-unused-expression\n        newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n      }\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n      const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n      this.actualValue = this.getActualValue(result);\n      // handle some separator implications:\n      // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n      if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n        this.decimalMarker = ',';\n      }\n      // b) remove decimal marker from list of special characters to mask\n      if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n        this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => item !== this.decimalMarker);\n      }\n      this.formControlResult(result);\n      if (!this.showMaskTyped) {\n        if (this.hiddenInput) {\n          return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n        }\n        return result;\n      }\n      const resLen = result.length;\n      const prefNmask = this.prefix + this.maskIsShown;\n      if (this.maskExpression.includes('H')) {\n        const countSkipedSymbol = this._numberSkipedSymbols(result);\n        return result + prefNmask.slice(resLen + countSkipedSymbol);\n      } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n        return result + prefNmask;\n      }\n      return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n      const regex = /(^|\\D)(\\d\\D)/g;\n      let match = regex.exec(value);\n      let countSkipedSymbol = 0;\n      while (match != null) {\n        countSkipedSymbol += 1;\n        match = regex.exec(value);\n      }\n      return countSkipedSymbol;\n    }\n    applyValueChanges(position = 0, justPasted, backspaced, cb = () => {}) {\n      const formElement = this._elementRef.nativeElement;\n      formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n      if (formElement === this.document.activeElement) {\n        return;\n      }\n      this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n      return inputValue.split('').map((curr, index) => {\n        if (this.maskAvailablePatterns && this.maskAvailablePatterns[maskExpression[index]] && this.maskAvailablePatterns[maskExpression[index]].symbol) {\n          return this.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n        return curr;\n      }).join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n      const compare = res.split('').filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) || this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]);\n      if (compare.join('') === res) {\n        return compare.join('');\n      }\n      return res;\n    }\n    shiftTypedSymbols(inputValue) {\n      let symbolToReplace = '';\n      const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n        if (this.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n          symbolToReplace = currSymbol;\n          return inputValue[index + 1];\n        }\n        if (symbolToReplace.length) {\n          const replaceSymbol = symbolToReplace;\n          symbolToReplace = '';\n          return replaceSymbol;\n        }\n        return currSymbol;\n      }) || [];\n      return newInputValue.join('');\n    }\n    showMaskInInput(inputVal) {\n      if (this.showMaskTyped && !!this.shownMaskExpression) {\n        if (this.maskExpression.length !== this.shownMaskExpression.length) {\n          throw new Error('Mask expression must match mask placeholder length');\n        } else {\n          return this.shownMaskExpression;\n        }\n      } else if (this.showMaskTyped) {\n        if (inputVal) {\n          if (this.maskExpression === 'IP') {\n            return this._checkForIp(inputVal);\n          }\n          if (this.maskExpression === 'CPF_CNPJ') {\n            return this._checkForCpfCnpj(inputVal);\n          }\n        }\n        return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n      }\n      return '';\n    }\n    clearIfNotMatchFn() {\n      const formElement = this._elementRef.nativeElement;\n      if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n        this.formElementProperty = ['value', ''];\n        this.applyMask(formElement.value, this.maskExpression);\n      }\n    }\n    set formElementProperty([name, value]) {\n      Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n      const chars = mask.split('').filter(item => this._findSpecialChar(item));\n      return chars.length;\n    }\n    removeMask(inputValue) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n      if (inputVal === '#') {\n        return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n      }\n      const arr = [];\n      for (let i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n      if (arr.length <= 3) {\n        return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n      }\n      if (arr.length > 3 && arr.length <= 6) {\n        return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n      }\n      if (arr.length > 6 && arr.length <= 9) {\n        return this.placeHolderCharacter;\n      }\n      if (arr.length > 9 && arr.length <= 12) {\n        return '';\n      }\n      return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n      const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n      const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n      if (inputVal === '#') {\n        return cpf;\n      }\n      const arr = [];\n      for (let i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n      if (arr.length <= 3) {\n        return cpf.slice(arr.length, cpf.length);\n      }\n      if (arr.length > 3 && arr.length <= 6) {\n        return cpf.slice(arr.length + 1, cpf.length);\n      }\n      if (arr.length > 6 && arr.length <= 9) {\n        return cpf.slice(arr.length + 2, cpf.length);\n      }\n      if (arr.length > 9 && arr.length < 11) {\n        return cpf.slice(arr.length + 3, cpf.length);\n      }\n      if (arr.length === 11) {\n        return '';\n      }\n      if (arr.length === 12) {\n        if (inputVal.length === 17) {\n          return cnpj.slice(16, cnpj.length);\n        }\n        return cnpj.slice(15, cnpj.length);\n      }\n      if (arr.length > 12 && arr.length <= 14) {\n        return cnpj.slice(arr.length + 4, cnpj.length);\n      }\n      return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n      if (this.writingValue) {\n        return;\n      }\n      if (Array.isArray(this.dropSpecialCharacters)) {\n        this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n      } else if (this.dropSpecialCharacters) {\n        this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n      } else {\n        this.onChange(this._removeSuffix(inputValue));\n      }\n    }\n    _toNumber(value) {\n      if (!this.isNumberValue || value === '') {\n        return value;\n      }\n      const num = Number(value);\n      return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n      return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n      if (!this.prefix) {\n        return value;\n      }\n      return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n      if (!this.suffix) {\n        return value;\n      }\n      return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n      return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n    }\n    _checkSymbols(result) {\n      if (result === '') {\n        return result;\n      }\n      const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n      let separatorValue = this._retrieveSeparatorValue(result);\n      if (this.decimalMarker !== '.') {\n        separatorValue = separatorValue.replace(this.decimalMarker, '.');\n      }\n      if (!this.isNumberValue) {\n        return separatorValue;\n      }\n      if (separatorPrecision) {\n        if (result === this.decimalMarker) {\n          return null;\n        }\n        return this._checkPrecision(this.maskExpression, separatorValue);\n      } else {\n        return Number(separatorValue);\n      }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n      const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n      return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n      if (separatorExpression.indexOf('2') > 0) {\n        return Number(separatorValue).toFixed(2);\n      }\n      return Number(separatorValue);\n    }\n  }\n  MaskService.ɵfac = function MaskService_Factory(t) {\n    return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n  };\n  MaskService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MaskService,\n    factory: MaskService.ɵfac\n  });\n  return MaskService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nlet MaskDirective = /*#__PURE__*/(() => {\n  class MaskDirective {\n    constructor(document, _maskService, _config) {\n      this.document = document;\n      this._maskService = _maskService;\n      this._config = _config;\n      this.maskExpression = '';\n      this.specialCharacters = [];\n      this.patterns = {};\n      this.prefix = '';\n      this.suffix = '';\n      this.thousandSeparator = ' ';\n      this.decimalMarker = '.';\n      this.dropSpecialCharacters = null;\n      this.hiddenInput = null;\n      this.showMaskTyped = null;\n      this.placeHolderCharacter = null;\n      this.shownMaskExpression = null;\n      this.showTemplate = null;\n      this.clearIfNotMatch = null;\n      this.validation = null;\n      this.separatorLimit = null;\n      this.allowNegativeNumbers = null;\n      this.leadZeroDateTime = null;\n      this._maskValue = '';\n      this._position = null;\n      this._maskExpressionArray = [];\n      this._justPasted = false;\n      this.onChange = _ => {};\n      this.onTouch = () => {};\n    }\n    ngOnChanges(changes) {\n      const {\n        maskExpression,\n        specialCharacters,\n        patterns,\n        prefix,\n        suffix,\n        thousandSeparator,\n        decimalMarker,\n        dropSpecialCharacters,\n        hiddenInput,\n        showMaskTyped,\n        placeHolderCharacter,\n        shownMaskExpression,\n        showTemplate,\n        clearIfNotMatch,\n        validation,\n        separatorLimit,\n        allowNegativeNumbers,\n        leadZeroDateTime\n      } = changes;\n      if (maskExpression) {\n        this._maskValue = maskExpression.currentValue || '';\n        if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n          this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n            return a.length - b.length;\n          });\n          this._maskValue = this._maskExpressionArray[0];\n          this.maskExpression = this._maskExpressionArray[0];\n          this._maskService.maskExpression = this._maskExpressionArray[0];\n        }\n      }\n      if (specialCharacters) {\n        if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n          return;\n        } else {\n          this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n        }\n      }\n      // Only overwrite the mask available patterns if a pattern has actually been passed in\n      if (patterns && patterns.currentValue) {\n        this._maskService.maskAvailablePatterns = patterns.currentValue;\n      }\n      if (prefix) {\n        this._maskService.prefix = prefix.currentValue;\n      }\n      if (suffix) {\n        this._maskService.suffix = suffix.currentValue;\n      }\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator.currentValue;\n      }\n      if (decimalMarker) {\n        this._maskService.decimalMarker = decimalMarker.currentValue;\n      }\n      if (dropSpecialCharacters) {\n        this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n      }\n      if (hiddenInput) {\n        this._maskService.hiddenInput = hiddenInput.currentValue;\n      }\n      if (showMaskTyped) {\n        this._maskService.showMaskTyped = showMaskTyped.currentValue;\n      }\n      if (placeHolderCharacter) {\n        this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n      }\n      if (shownMaskExpression) {\n        this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n      }\n      if (showTemplate) {\n        this._maskService.showTemplate = showTemplate.currentValue;\n      }\n      if (clearIfNotMatch) {\n        this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n      }\n      if (validation) {\n        this._maskService.validation = validation.currentValue;\n      }\n      if (separatorLimit) {\n        this._maskService.separatorLimit = separatorLimit.currentValue;\n      }\n      if (allowNegativeNumbers) {\n        this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n        if (this._maskService.allowNegativeNumbers) {\n          this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n        }\n      }\n      if (leadZeroDateTime) {\n        this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n      }\n      this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    validate({\n      value\n    }) {\n      if (!this._maskService.validation || !this._maskValue) {\n        return null;\n      }\n      if (this._maskService.ipError) {\n        return this._createValidationError(value);\n      }\n      if (this._maskService.cpfCnpjError) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.startsWith('separator')) {\n        return null;\n      }\n      if (withoutValidation.includes(this._maskValue)) {\n        return null;\n      }\n      if (this._maskService.clearIfNotMatch) {\n        return null;\n      }\n      if (timeMasks.includes(this._maskValue)) {\n        return this._validateTime(value);\n      }\n      if (value && value.toString().length >= 1) {\n        let counterOfOpt = 0;\n        for (const key in this._maskService.maskAvailablePatterns) {\n          if (this._maskService.maskAvailablePatterns[key].optional && this._maskService.maskAvailablePatterns[key].optional === true) {\n            if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n              const opt = this._maskValue.split('').filter(i => i === key).join('');\n              counterOfOpt += opt.length;\n            } else if (this._maskValue.indexOf(key) !== -1) {\n              counterOfOpt++;\n            }\n            if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n              return null;\n            }\n            if (counterOfOpt === this._maskValue.length) {\n              return null;\n            }\n          }\n        }\n        if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n          return null;\n        }\n        if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n          return null;\n        } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n          return this._createValidationError(value);\n        }\n        if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n          const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n      }\n      return null;\n    }\n    onPaste() {\n      this._justPasted = true;\n    }\n    onInput(e) {\n      const el = e.target;\n      this._inputValue = el.value;\n      this._setMask();\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n      const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n      let caretShift = 0;\n      let backspaceShift = false;\n      this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace', (shift, _backspaceShift) => {\n        this._justPasted = false;\n        caretShift = shift;\n        backspaceShift = _backspaceShift;\n      });\n      // only set the selection if the element is active\n      if (this.document.activeElement !== el) {\n        return;\n      }\n      this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n      let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n      if (positionToApply > this._getActualInputLength()) {\n        positionToApply = this._getActualInputLength();\n      }\n      el.setSelectionRange(positionToApply, positionToApply);\n      this._position = null;\n    }\n    onBlur() {\n      if (this._maskValue) {\n        this._maskService.clearIfNotMatchFn();\n      }\n      this.onTouch();\n    }\n    onFocus(e) {\n      if (!this._maskValue) {\n        return;\n      }\n      const el = e.target;\n      const posStart = 0;\n      const posEnd = 0;\n      if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      e.keyCode !== 38) {\n        if (this._maskService.showMaskTyped) {\n          // We are showing the mask in the input\n          this._maskService.maskIsShown = this._maskService.showMaskInInput();\n          if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n            // the input ONLY contains the mask, so position the cursor at the start\n            el.focus();\n            el.setSelectionRange(posStart, posEnd);\n          } else {\n            // the input contains some characters already\n            if (el.selectionStart > this._maskService.actualValue.length) {\n              // if the user clicked beyond our value's length, position the cursor at the end of our value\n              el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n            }\n          }\n        }\n      }\n      const nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n      /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n      if (el.value !== nextValue) {\n        el.value = nextValue;\n      }\n      /** fix of cursor position with prefix when mouse click occur */\n      if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n        el.selectionStart = this._maskService.prefix.length;\n        return;\n      }\n      /** select only inserted text */\n      if (el.selectionEnd > this._getActualInputLength()) {\n        el.selectionEnd = this._getActualInputLength();\n      }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown(e) {\n      var _a;\n      if (!this._maskValue) {\n        return;\n      }\n      this._code = e.code ? e.code : e.key;\n      const el = e.target;\n      this._inputValue = el.value;\n      this._setMask();\n      if (e.keyCode === 38) {\n        e.preventDefault();\n      }\n      if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n        if (e.keyCode === 8 && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n        if (e.keyCode === 8 && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, this.prefix.length);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n              }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n          }\n        }\n        this.suffixCheckOnPressDelete(e.keyCode, el);\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n        const cursorStart = el.selectionStart;\n        // this.onFocus(e);\n        if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.keyCode === 65 && e.ctrlKey === true ||\n      // Ctrl+ A\n      e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    writeValue(inputValue) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n          if ('disable' in inputValue) {\n            this.setDisabledState(Boolean(inputValue.disable));\n          }\n          inputValue = inputValue.value;\n        }\n        if (inputValue === undefined) {\n          inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n          inputValue = String(inputValue);\n          inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n          this._maskService.isNumberValue = true;\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n          // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n          this._maskService.writingValue = true;\n          this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)];\n          // Let the service know we've finished writing value\n          this._maskService.writingValue = false;\n        } else {\n          this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n      });\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n      this._maskService.onChange = this.onChange;\n    }\n    registerOnTouched(fn) {\n      this.onTouch = fn;\n    }\n    suffixCheckOnPressDelete(keyCode, el) {\n      if (keyCode === 46 && this.suffix.length > 0) {\n        if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n      }\n      if (keyCode === 8) {\n        if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n          el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n        }\n      }\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n      this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n      return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currval, index) => {\n        this._start = currval === '{' ? index : this._start;\n        if (currval !== '}') {\n          return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n        }\n        this._end = index;\n        const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n        const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n        return accum + replaceWith;\n      }, '') || maskExp;\n    }\n    // tslint:disable-next-line:no-any\n    _applyMask() {\n      this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n      this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n    }\n    _validateTime(value) {\n      const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n      if (value === null || value.length === 0) {\n        return null; // Don't validate empty values to allow for optional form control\n      }\n      if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n        return this._createValidationError(value);\n      }\n      return null;\n    }\n    _getActualInputLength() {\n      return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n    }\n    _createValidationError(actualValue) {\n      return {\n        mask: {\n          requiredMask: this._maskValue,\n          actualValue\n        }\n      };\n    }\n    _setMask() {\n      if (this._maskExpressionArray.length > 0) {\n        this._maskExpressionArray.some(mask => {\n          const test = this._maskService.removeMask(this._inputValue).length <= this._maskService.removeMask(mask).length;\n          if (this._inputValue && test) {\n            this._maskValue = mask;\n            this.maskExpression = mask;\n            this._maskService.maskExpression = mask;\n            return test;\n          } else {\n            this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n            this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n            this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          }\n        });\n      }\n    }\n  }\n  MaskDirective.ɵfac = function MaskDirective_Factory(t) {\n    return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config));\n  };\n  MaskDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MaskDirective,\n    selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n    hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n          return ctx.onPaste();\n        })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n          return ctx.onFocus($event);\n        })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      maskExpression: [\"mask\", \"maskExpression\"],\n      specialCharacters: \"specialCharacters\",\n      patterns: \"patterns\",\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      thousandSeparator: \"thousandSeparator\",\n      decimalMarker: \"decimalMarker\",\n      dropSpecialCharacters: \"dropSpecialCharacters\",\n      hiddenInput: \"hiddenInput\",\n      showMaskTyped: \"showMaskTyped\",\n      placeHolderCharacter: \"placeHolderCharacter\",\n      shownMaskExpression: \"shownMaskExpression\",\n      showTemplate: \"showTemplate\",\n      clearIfNotMatch: \"clearIfNotMatch\",\n      validation: \"validation\",\n      separatorLimit: \"separatorLimit\",\n      allowNegativeNumbers: \"allowNegativeNumbers\",\n      leadZeroDateTime: \"leadZeroDateTime\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    }, MaskService]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MaskDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MaskPipe = /*#__PURE__*/(() => {\n  class MaskPipe {\n    constructor(_maskService) {\n      this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n      if (!value && typeof value !== 'number') {\n        return '';\n      }\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator;\n      }\n      if (typeof mask === 'string') {\n        return this._maskService.applyMask(`${value}`, mask);\n      }\n      return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n  }\n  MaskPipe.ɵfac = function MaskPipe_Factory(t) {\n    return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService, 16));\n  };\n  MaskPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"mask\",\n    type: MaskPipe,\n    pure: true\n  });\n  return MaskPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxMaskModule = /*#__PURE__*/(() => {\n  class NgxMaskModule {\n    static forRoot(configValue) {\n      return {\n        ngModule: NgxMaskModule,\n        providers: [{\n          provide: NEW_CONFIG,\n          useValue: configValue\n        }, {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        }, {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        }, MaskApplierService]\n      };\n    }\n    static forChild() {\n      return {\n        ngModule: NgxMaskModule\n      };\n    }\n  }\n  NgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n    return new (t || NgxMaskModule)();\n  };\n  NgxMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxMaskModule\n  });\n  NgxMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return NgxMaskModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, {\n    declarations: [MaskDirective, MaskPipe],\n    exports: [MaskDirective, MaskPipe]\n  });\n})();\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n\n//# sourceMappingURL=ngx-mask.js.map","map":null,"metadata":{},"sourceType":"module"}