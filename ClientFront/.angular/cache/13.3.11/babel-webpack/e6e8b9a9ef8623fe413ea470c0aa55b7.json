{"ast":null,"code":"import { ClassTransformer } from './ClassTransformer';\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\nconst classTransformer = new ClassTransformer();\nexport function classToPlain(object, options) {\n  return classTransformer.classToPlain(object, options);\n}\nexport function classToPlainFromExist(object, plainObject, options) {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\nexport function plainToClass(cls, plain, options) {\n  return classTransformer.plainToClass(cls, plain, options);\n}\nexport function plainToClassFromExist(clsObject, plain, options) {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\nexport function classToClass(object, options) {\n  return classTransformer.classToClass(object, options);\n}\nexport function classToClassFromExist(object, fromObject, options) {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\nexport function serialize(object, options) {\n  return classTransformer.serialize(object, options);\n}\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nexport function deserialize(cls, json, options) {\n  return classTransformer.deserialize(cls, json, options);\n}\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nexport function deserializeArray(cls, json, options) {\n  return classTransformer.deserializeArray(cls, json, options);\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}