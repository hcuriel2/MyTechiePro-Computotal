{"ast":null,"code":"import { plainToClass } from 'class-transformer';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Project } from '../models/project';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ProjectService = /*#__PURE__*/(() => {\n  class ProjectService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.API_URL = `${environment.apiEndpoint}/projects`;\n    }\n    getProjectsByProId(id) {\n      return this.httpClient.get(`${this.API_URL}/professional/${id}`).pipe(map(project => plainToClass(Project, project)));\n    }\n    getAll() {\n      return this.httpClient.get(this.API_URL).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    get(id) {\n      return this.httpClient.get(`${this.API_URL}/${id}`).pipe(map(project => plainToClass(Project, project)));\n    }\n    getByClientId(clientId) {\n      return this.httpClient.get(`${this.API_URL}/client/${clientId}`).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    getByProfessionalId(professionalId) {\n      return this.httpClient.get(`${this.API_URL}/professional/${professionalId}`).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    create(categoryId, serviceId, serviceName, professionalId, clientId) {\n      return this.httpClient.post(this.API_URL, {\n        categoryId,\n        serviceId,\n        serviceName,\n        professionalId,\n        clientId\n      }, {\n        withCredentials: true\n      }).pipe(map(project => plainToClass(Project, project)));\n    }\n    startProject(projectId, totalCost, projectDetails, professionalId) {\n      return this.httpClient.patch(`${this.API_URL}/start/${projectId}`, {\n        totalCost,\n        projectDetails,\n        professionalId\n      }).pipe(catchError(err => {\n        console.log('error caught in service');\n        console.error(err);\n        //Handle the error here\n        window.location.reload();\n        return throwError(err); //Rethrow it back to component\n      }));\n    }\n    // public startProject( projectId: string, totalCost: string, projectStartDate: string, projectEndDate: string, projectDetails: string, professionalId: string) {\n    //     console.log(\"startProject\");\n    //     this.router.navigateByUrl('/project/${project_id}').then(() => {\n    //         window.location.reload();\n    //     });\n    // }\n    completeProject(projectId, eTransferEmail, professionalId, projectStartDate, projectEndDate, totalCost) {\n      return this.httpClient.patch(`${this.API_URL}/complete/${projectId}`, {\n        eTransferEmail,\n        professionalId,\n        projectStartDate,\n        projectEndDate,\n        totalCost\n      }).pipe(catchError(err => {\n        console.log('error caught in service');\n        console.error(err);\n        //Handle the error here\n        window.location.reload();\n        return throwError(err); //Rethrow it back to component\n      }));\n      ;\n    }\n    payProject(projectId, clientId) {\n      return this.httpClient.patch(`${this.API_URL}/pay/${projectId}`, {\n        clientId\n      }).pipe(catchError(err => {\n        console.log('error caught in service');\n        console.error(err);\n        //Handle the error here\n        window.location.reload();\n        return throwError(err); //Rethrow it back to component\n      }));\n      ;\n      ;\n    }\n    rateProject(projectId, rating, feedback, professionalId) {\n      return this.httpClient.patch(`${this.API_URL}/feedback/${projectId}`, {\n        rating,\n        feedback,\n        professionalId\n      });\n    }\n    commentProject(projectId, text, userId) {\n      return this.httpClient.patch(`${this.API_URL}/comment/${projectId}`, {\n        text,\n        userId\n      });\n    }\n  }\n  ProjectService.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  ProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProjectService;\n})();","map":null,"metadata":{},"sourceType":"module"}