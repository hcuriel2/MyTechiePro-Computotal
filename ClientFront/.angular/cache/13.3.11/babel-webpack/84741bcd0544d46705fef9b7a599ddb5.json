{"ast":null,"code":"import { plainToClass } from 'class-transformer';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Project } from '../models/project';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ProjectService = /*#__PURE__*/(() => {\n  class ProjectService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.API_URL = `${environment.apiEndpoint}/projects`;\n    }\n    getProjectsByProId(id) {\n      return this.httpClient.get(`${this.API_URL}/professional/${id}`).pipe(map(project => plainToClass(Project, project)));\n    }\n    getAll() {\n      return this.httpClient.get(this.API_URL).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    get(id) {\n      return this.httpClient.get(`${this.API_URL}/${id}`).pipe(map(project => plainToClass(Project, project)));\n    }\n    getByClientId(clientId) {\n      return this.httpClient.get(`${this.API_URL}/client/${clientId}`).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    getByProfessionalId(professionalId) {\n      return this.httpClient.get(`${this.API_URL}/professional/${professionalId}`).pipe(map(projects => plainToClass(Project, projects)));\n    }\n    create(categoryId, serviceId, serviceName, professionalId, clientId) {\n      return this.httpClient.post(this.API_URL, {\n        categoryId,\n        serviceId,\n        serviceName,\n        professionalId,\n        clientId\n      }, {\n        withCredentials: true\n      }).pipe(map(project => plainToClass(Project, project)));\n    }\n    startProject(projectId, totalCost, projectDetails, professionalId) {\n      return this.httpClient.patch(`${this.API_URL}/start/${projectId}`, {\n        totalCost,\n        projectDetails,\n        professionalId\n      }).pipe(catchError(err => {\n        