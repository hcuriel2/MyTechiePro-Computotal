{"ast":null,"code":"import { SurveyChoice } from '../../shared/models/survey-choice';\nimport { fakeSurveyData } from '../../shared/models/fakeDatabaseSurveys';\nimport { first } from 'rxjs/operators';\nimport { Survey } from 'src/app/shared/models/survey';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/shared/services/category.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../service-survey-module/service-survey-module.component\";\nimport * as i5 from \"../service-survey-module-summary/service-survey-module-summary.component\";\nfunction ServiceSurveyComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-service-survey-module\", 1);\n    i0.ɵɵlistener(\"nextSurveyRequest\", function ServiceSurveyComponent_div_0_Template_app_service_survey_module_nextSurveyRequest_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.goToNextSurvey($event);\n    })(\"prevSurveyRequest\", function ServiceSurveyComponent_div_0_Template_app_service_survey_module_prevSurveyRequest_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.goToPrevSurvey();\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r0.title)(\"surveyModule\", ctx_r0.currentModule)(\"isFirstModule\", ctx_r0.isFirstModule);\n  }\n}\nfunction ServiceSurveyComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-service-survey-module-summary\", 2);\n    i0.ɵɵlistener(\"goToTechSelectionRequest\", function ServiceSurveyComponent_div_1_Template_app_service_survey_module_summary_goToTechSelectionRequest_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.renderTechSelection();\n    })(\"prevSurveyRequest\", function ServiceSurveyComponent_div_1_Template_app_service_survey_module_summary_prevSurveyRequest_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.goToPrevSurvey();\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"summary\", ctx_r1.summary);\n  }\n}\nexport let ServiceSurveyComponent = /*#__PURE__*/(() => {\n  class ServiceSurveyComponent {\n    constructor(route, router, categoryService, changeDetectorRef) {\n      this.route = route;\n      this.router = router;\n      this.categoryService = categoryService;\n      this.changeDetectorRef = changeDetectorRef;\n      this.isFirstModule = true;\n      this.goToSummary = false;\n      this.goToTechSelection = false;\n      this.categorySelection = '';\n      this.choices = [];\n      this.route.queryParams.subscribe(params => {\n        // Gets query params from URL.\n        this.categorySelection = params.categoryName;\n        this.isFirstModule = true;\n      });\n    }\n    ngOnInit() {\n      this.getStaticData();\n    }\n    /**\n     * Builds summary in preparation for summary component render.\n     * @returns\n     */\n    buildSummary() {\n      const result = [];\n      result.push('Category: ' + this.categorySelection);\n      this.choices.forEach(element => {\n        result.push(element.toString());\n      });\n      return result;\n    }\n    goToNextSurvey(message) {\n      this.choices.push(new SurveyChoice(this.survey.question, message, this.survey.key));\n      if (this.isLast(message)) {\n        this.summary = this.buildSummary();\n        this.goToSummary = true;\n      } else {\n        // this.survey = this.survey.contents?.find((s) => s === message) || '';\n        this.currentModule = Object.keys(this.survey.contents);\n        this.title = this.survey.question;\n        this.isFirstModule = false;\n      }\n    }\n    goToPrevSurvey() {\n      var _a;\n      if (this.goToSummary) {\n        this.goToSummary = false;\n      }\n      // Backtracks using choices to get \"one level above\".\n      let temp = fakeSurveyData[this.categorySelection].survey;\n      for (let i = 0; i < this.choices.length - 1; i++) {\n        temp = temp.content[this.choices[i].getAnswer()];\n      }\n      this.survey = temp;\n      const lastChoice = (_a = this.choices.pop()) === null || _a === void 0 ? void 0 : _a.getAnswer();\n      // console.log(\"Popped: \" + lastChoice);\n      // Nests in a level deeper for the next survey.\n      this.currentModule = Object.keys(this.survey.contents);\n      this.title = this.survey.question;\n      this.isFirstModule = this.isFirst();\n    }\n    renderTechSelection() {\n      console.log('renderTechSelection');\n      this.router.navigate(['/service-tech-select'], {\n        queryParams: {\n          category: this.categorySelection,\n          service: this.choices[0].answer\n        }\n      });\n    }\n    /**\n     * Returns if user is on first survey module.\n     * @returns\n     */\n    isFirst() {\n      return this.choices.length === 0;\n    }\n    /**\n     * Returns if user is on last survey module.\n     * @param message a string\n     * @returns\n     */\n    isLast(message) {\n      return true;\n    }\n    getStaticData() {\n      this.categoryService.getAll().pipe(first()).subscribe(categories => {\n        this.categories = categories;\n        this.extractCategoryData();\n        this.changeDetectorRef.detectChanges();\n      }, error => {\n        console.error(`Error in CarrierLaneRate.getStaticData(): ${error}`, error);\n      });\n    }\n    extractCategoryData() {\n      var _a;\n      this.selectedCategory = this.categories.find(category => category.name === this.categorySelection);\n      if (this.selectedCategory) {\n        const question = `What ${this.selectedCategory.name} service is needed?`;\n        const services = (_a = this.selectedCategory) === null || _a === void 0 ? void 0 : _a.services.map(service => service.name);\n        this.survey = new Survey(question, 'subCategory', services);\n        this.title = this.survey.question;\n        this.currentModule = this.survey.contents;\n      }\n    }\n  }\n  ServiceSurveyComponent.ɵfac = function ServiceSurveyComponent_Factory(t) {\n    return new (t || ServiceSurveyComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  ServiceSurveyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ServiceSurveyComponent,\n    selectors: [[\"app-service-survey\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [3, \"title\", \"surveyModule\", \"isFirstModule\", \"nextSurveyRequest\", \"prevSurveyRequest\"], [3, \"summary\", \"goToTechSelectionRequest\", \"prevSurveyRequest\"]],\n    template: function ServiceSurveyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ServiceSurveyComponent_div_0_Template, 2, 3, \"div\", 0);\n        i0.ɵɵtemplate(1, ServiceSurveyComponent_div_1_Template, 2, 1, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.goToSummary && !ctx.goToTechSelection);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.goToSummary && !ctx.goToTechSelection);\n      }\n    },\n    directives: [i3.NgIf, i4.ServiceSurveyModuleComponent, i5.ServiceSurveyModuleSummaryComponent],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return ServiceSurveyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}