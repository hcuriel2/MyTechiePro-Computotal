{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.userSubject = new BehaviorSubject(null);\n      this.user = this.userSubject.asObservable();\n      this.API_URL = `${environment.apiEndpoint}/auth`;\n    }\n    // Retrieves the current User's values\n    get userValue() {\n      return this.userSubject.value;\n    }\n    // Register a new User\n    registerUser(user) {\n      return this.httpClient.post(`${this.API_URL}/register`, user, {\n        withCredentials: true\n      });\n    }\n    // Signs in a User\n    // Assigns the User's values to the UserSubject\n    // It's then accessible through the 'this.user' value\n    signIn(user) {\n      console.log('Attempting to sign in user', user);\n      return this.httpClient.post(`${this.API_URL}/login`, user, {\n        withCredentials: true\n      }).pipe(tap(user => {\n        console.log('SignIn: User signed in', user);\n        this.userSubject.next(user);\n      }));\n    }\n    // Modified the function - it needs to be a POST request in order to be secure\n    sendEmailResetPw(emailAddress) {\n      const body = {\n        emailAddress\n      };\n      return this.httpClient.post(`${this.API_URL}/resetPassword`, body, {\n        withCredentials: true\n      });\n    }\n    // Signs out the User\n    // Updates the userSubject null, so no User values remain\n    signOut() {\n      return this.httpClient.post(`${this.API_URL}/logout`, {}, {\n        withCredentials: true\n      }).pipe(tap(() => {\n        console.log('Signout: user signed out');\n        this.userSubject.next(null);\n      }));\n    }\n    // Retrieves the User information from the database\n    // Passes it into the userSubject - which allows the UI to be applied from the User values\n    getUserInfo() {\n      console.log('Fetching user info');\n      return this.httpClient.get(`${this.API_URL}/userInfo`, {\n        withCredentials: true\n      }).pipe(tap(user => {\n        console.log('UserInfo: Received user info', user);\n        this.userSubject.next(user);\n      }));\n    }\n    // Updates the User's information on the 'settings' page\n    // All changes will update the User entry in the database\n    updateUserSettings(userId, updates) {\n      return this.httpClient.patch(`${this.API_URL}/settings/${userId}`, updates);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}